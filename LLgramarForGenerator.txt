%token
    elseKey
    functionKey
    ifKey
    nullKey
    returnKey
    voidKey
    whileKey
    stringKey
    floatKey
    intKey
    stringNullKey
    floatNullKey
    intNullKey

    // curly braces
    curlyBraceRight
    curlyBraceLeft

    // assignment
    equals
    colon
    semicolon
    comma

    // operators
    multiplicationOp
    divisionOp
    plusOp
    minusOp
    concatenationOp
    lesserThanOp
    lesserEqOp
    greaterThanOp
    greaterEqOp
    eqOp
    notEqOp

    // parentheses
    leftPar
    rightPar

    // literals
    stringLiteral // "hello"
    integerLiteral
    floatLiteral

    // identifiers
    identifierFunc
    identifierVar

    // unknown
    unknown

    // EOF type
    ending
%%
// S - init stav
  ProgramBody : FceDefine ProgramBody;
  ProgramBody : Command ProgramBody;
  ProgramBody : /*eps*/;

  // Command
  Command : DeclareVariable;
  Command : Condition;
  Command : While;
  Command : Return;
  Command : Exp semiColon;

  // Definice funkcí
  FceDefine : FceHeader leftCurlyBrace FunctionBody rightCurlyBrace;
  FceHeader : functionKey identifierFunc leftPar FunctionDeclareParams rightPar colon FuncReturnColonType;
  FunctionDeclareParams : /*eps*/;
  FunctionDeclareParams : DeclareParam  CommaOrEpsParams;
  CommaOrEpsParams : /*eps*/;
  CommaOrEpsParams : comma DeclareParam  CommaOrEpsParams;
  DeclareParam : DataType identifier;

  // FuncReturnType
  FuncReturnColonType : DataType;
  FuncReturnColonType : voidKey;

  // Function call
  FceCall : identifierFunc leftPar FirstFceParam rightPar;
  FirstFceParam : /*eps*/;
  FirstFceParam : Exp CommaOrEpsParam;
  CommaOrEpsParam : /*eps*/;
  CommaOrEpsParam : comma Exp CommaOrEps;

  // Exp
  Exp : identifierVar;
  Exp : FceCall;
  Exp : floatLiteral;
  Exp : stringLiteral;
  Exp : integerLiteral;
  Exp : nullKey;
  Exp : Exp minusOp Exp;
  Exp : Exp plusOp Exp;
  Exp : Exp divisionOp Exp;
  Exp : Exp multiplicationOp Exp;
  Exp : Exp integerDivisionOp Exp;
  Exp : Exp concatenationOp Exp;
  Exp : leftPar Exp rightPar;


  // Data types DataType
  DataType : stringNullKey;
  DataType : floatNullKey;
  DataType : intNullKey;
  DataType : stringKey;
  DataType : floatKey;
  DataType : intKey;


  // Definice proměné
  DeclareVariable :  identifierVar DefVarAss;
  DefVarAss : equals Exp semiColon;
  DefVarAss : semiColon;

  // Podmínky
  Condition : ifKey leftPar Exp rightPar leftCurlyBrace FunctionBody rightCurlyBrace ElseCond;
  ElseCond : elseKey leftCurlyBrace FunctionBody rightCurlyBrace;
  ElseCond : /*eps*/;

  // While
  While : whileKey leftPar Exp rightPar leftCurlyBrace FunctionBody rightCurlyBrace;

  // Return
  Return : returnKey ReturnExp semiColon;
  ReturnExp : Exp;
  ReturnExp : /*eps*/;

  // Vnítřek funkce
  FunctionBody : Command FunctionBody;
  FunctionBody : /*eps*/;